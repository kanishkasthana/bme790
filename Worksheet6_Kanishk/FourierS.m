%% BME 790.01F13 Engineering Programming and Signal Processing
%% Modified Code to generate Complex Exponential Fourier Series

function [index,x,a, b, w0, Series] = FourierS( input, order, T )

%Calculates the Fourier Series for a given periodic function defined as 'input' 
% which represents one period of the periodic function, of order 'order' with
%fundamental period T and outputs the 'a' vector which contains the
%coefficients of each a and the coefficients of each b, the fundamental frequency, w0

%KANISHK: Changing order so that zero order term is not counted as the first order
order=order+1;

len=length(input);

%fundamental frequency, and create your time vector using the input for T,
%period.

w0=2*pi/T;

dT=T/len;

t=linspace(0,T,len);


b=zeros(1,order);
%KANISHK: Changing a vector such that there is a zero value for a(0)
a=zeros(1,order);

yint=integrate(input,T/len);
b(1)=1/T*yint(len);

%Creating indexing array for X[K]
index= -1*(order-1):(order -1);
x=zeros(1,length(index));
x(index==0)=b(1);
%Calculate all other a and b coefficients

for k=2:order
    rep=cos((k-1)*w0*t);
    repsin=sin((k-1)*w0*t);
    yint2=integrate(input.*rep, dT);%cos
    b(k)=yint2(len)*2/T;
    yint3=integrate(input.*repsin, dT);%sin
    a(k)=yint3(len)*2/T;
    x(index==(k-1))=(b(k)-i*a(k))/2;
    x(index==-1*(k-1))=(b(k)+i*a(k))/2;
end



%Now calculate the representation of input using the Fourier Series
%generated by this program

Series=zeros(1,len)+ b(1);

%Modified Summation
for k=2:order
   Series=Series+ b(k)*cos((k-1)*w0*t)+a(k)*sin((k-1)*w0*t);
end

end

